# =====================================================
# WAKAA - Script de Configuration Base de Donn√©es
# =====================================================

param(
    [string]$Action = "setup",
    [string]$Password = "Romuald12"
)

$PostgreSQLPath = "C:\Program Files\PostgreSQL\17\bin"
$DatabaseName = "wakaa"
$Username = "postgres"

Write-Host "üöÄ Configuration de la base de donn√©es Wakaa..." -ForegroundColor Green

# Fonction pour ex√©cuter une commande psql
function Invoke-PSQL {
    param(
        [string]$Command,
        [string]$Database = "postgres"
    )
    
    $env:PGPASSWORD = $Password
    & "$PostgreSQLPath\psql.exe" -h localhost -U $Username -d $Database -c $Command
}

# Fonction pour ex√©cuter un fichier SQL
function Invoke-PSQLFile {
    param(
        [string]$FilePath,
        [string]$Database = $DatabaseName
    )
    
    $env:PGPASSWORD = $Password
    & "$PostgreSQLPath\psql.exe" -h localhost -U $Username -d $Database -f $FilePath
}

switch ($Action.ToLower()) {
    "setup" {
        Write-Host "üìã √âtape 1: V√©rification du service PostgreSQL..." -ForegroundColor Yellow
        
        # V√©rifier si le service est en cours d'ex√©cution
        $service = Get-Service -Name "postgresql-x64-17" -ErrorAction SilentlyContinue
        if ($service -and $service.Status -ne "Running") {
            Write-Host "‚ö†Ô∏è  Le service PostgreSQL n'est pas d√©marr√©. Veuillez le d√©marrer manuellement." -ForegroundColor Red
            Write-Host "   Commande: Start-Service postgresql-x64-17 (en tant qu'administrateur)" -ForegroundColor Yellow
            return
        }

        Write-Host "üìã √âtape 2: Cr√©ation de la base de donn√©es..." -ForegroundColor Yellow
        
        # Supprimer la base de donn√©es si elle existe
        Invoke-PSQL "DROP DATABASE IF EXISTS $DatabaseName;"
        
        # Cr√©er la nouvelle base de donn√©es
        Invoke-PSQL "CREATE DATABASE $DatabaseName WITH ENCODING='UTF8' LC_COLLATE='French_France.1252' LC_CTYPE='French_France.1252';"
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Base de donn√©es '$DatabaseName' cr√©√©e avec succ√®s!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Erreur lors de la cr√©ation de la base de donn√©es" -ForegroundColor Red
            return
        }

        Write-Host "üìã √âtape 3: Ex√©cution des migrations..." -ForegroundColor Yellow
        
        # Ex√©cuter le fichier de migration
        if (Test-Path "database/migration.sql") {
            Invoke-PSQLFile "database/migration.sql"
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Migrations ex√©cut√©es avec succ√®s!" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Erreur lors de l'ex√©cution des migrations" -ForegroundColor Red
                return
            }
        } else {
            Write-Host "‚ùå Fichier de migration non trouv√©: database/migration.sql" -ForegroundColor Red
            return
        }

        Write-Host "üìã √âtape 4: Insertion des donn√©es de test..." -ForegroundColor Yellow
        
        # Ex√©cuter le fichier de donn√©es de test
        if (Test-Path "database/seed.sql") {
            Invoke-PSQLFile "database/seed.sql"
            if ($LASTEXITCODE -eq 0) {
                Write-Host "‚úÖ Donn√©es de test ins√©r√©es avec succ√®s!" -ForegroundColor Green
            } else {
                Write-Host "‚ùå Erreur lors de l'insertion des donn√©es de test" -ForegroundColor Red
                return
            }
        } else {
            Write-Host "‚ùå Fichier de donn√©es de test non trouv√©: database/seed.sql" -ForegroundColor Red
            return
        }

        Write-Host "üéâ Configuration termin√©e avec succ√®s!" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìä Informations de connexion:" -ForegroundColor Cyan
        Write-Host "   Host: localhost" -ForegroundColor White
        Write-Host "   Port: 5432" -ForegroundColor White
        Write-Host "   Database: $DatabaseName" -ForegroundColor White
        Write-Host "   Username: $Username" -ForegroundColor White
        Write-Host "   Password: $Password" -ForegroundColor White
        Write-Host ""
        Write-Host "üîó URL de connexion:" -ForegroundColor Cyan
        Write-Host "   postgresql://$Username`:$Password@localhost:5432/$DatabaseName" -ForegroundColor White
    }
    
    "reset" {
        Write-Host "üîÑ R√©initialisation de la base de donn√©es..." -ForegroundColor Yellow
        
        # Supprimer et recr√©er la base de donn√©es
        Invoke-PSQL "DROP DATABASE IF EXISTS $DatabaseName;"
        Invoke-PSQL "CREATE DATABASE $DatabaseName WITH ENCODING='UTF8';"
        
        Write-Host "‚úÖ Base de donn√©es r√©initialis√©e!" -ForegroundColor Green
    }
    
    "migrate" {
        Write-Host "üìã Ex√©cution des migrations uniquement..." -ForegroundColor Yellow
        
        if (Test-Path "database/migration.sql") {
            Invoke-PSQLFile "database/migration.sql"
            Write-Host "‚úÖ Migrations ex√©cut√©es!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Fichier de migration non trouv√©" -ForegroundColor Red
        }
    }
    
    "seed" {
        Write-Host "üìã Insertion des donn√©es de test uniquement..." -ForegroundColor Yellow
        
        if (Test-Path "database/seed.sql") {
            Invoke-PSQLFile "database/seed.sql"
            Write-Host "‚úÖ Donn√©es de test ins√©r√©es!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Fichier de donn√©es de test non trouv√©" -ForegroundColor Red
        }
    }
    
    "status" {
        Write-Host "üìä V√©rification du statut de la base de donn√©es..." -ForegroundColor Yellow
        
        # V√©rifier la connexion
        $env:PGPASSWORD = $Password
        $result = & "$PostgreSQLPath\psql.exe" -h localhost -U $Username -d $DatabaseName -c "\dt" 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Connexion √† la base de donn√©es r√©ussie!" -ForegroundColor Green
            Write-Host "üìã Tables disponibles:" -ForegroundColor Cyan
            Write-Host $result -ForegroundColor White
        } else {
            Write-Host "‚ùå Impossible de se connecter √† la base de donn√©es" -ForegroundColor Red
            Write-Host $result -ForegroundColor Red
        }
    }
    
    default {
        Write-Host "‚ùå Action non reconnue: $Action" -ForegroundColor Red
        Write-Host ""
        Write-Host "Actions disponibles:" -ForegroundColor Cyan
        Write-Host "  setup   - Configuration compl√®te (d√©faut)" -ForegroundColor White
        Write-Host "  reset   - R√©initialiser la base de donn√©es" -ForegroundColor White
        Write-Host "  migrate - Ex√©cuter les migrations uniquement" -ForegroundColor White
        Write-Host "  seed    - Ins√©rer les donn√©es de test uniquement" -ForegroundColor White
        Write-Host "  status  - V√©rifier le statut de la base de donn√©es" -ForegroundColor White
        Write-Host ""
        Write-Host "Exemple: .\scripts\setup-database.ps1 -Action setup -Password monmotdepasse" -ForegroundColor Yellow
    }
}